// <auto-generated />
using System;
using Admin.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Admin.Migrations
{
    [DbContext(typeof(WowCarryContext))]
    [Migration("20220520154535_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Admin.Entities.DbArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArticleSeoId")
                        .HasColumnType("uuid")
                        .HasColumnName("ArticleSeoId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ProductGameId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReadTime")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Tags")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleSeoId");

                    b.HasIndex("ProductGameId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Admin.Entities.DbCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CarryCoinsValue")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("Password")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<Guid?>("RankId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Admin.Entities.DbHtmlBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChildCssclass")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("ChildCSSClass");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("ParentCssclass")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ParentCSSClass");

                    b.Property<string>("ParentTitle")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("SitePage")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("HtmlBlocks");
                });

            modelBuilder.Entity("Admin.Entities.DbHtmlBlocksChild", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ChildOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Cssclass")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CSSClass");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SiteBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SiteBlockId");

                    b.ToTable("HtmlBlocksChildren");
                });

            modelBuilder.Entity("Admin.Entities.DbOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CarryCoinsCollected")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CarryCoinsSpent")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerIp")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("CustomerIP");

                    b.Property<string>("Discord")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("Email")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<DateTime?>("EmailSendTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("EmailSended")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderCustomFieldsId")
                        .HasColumnType("uuid");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("PaymentCode")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderCustomFieldsId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Admin.Entities.DbOrderCustomField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClassicBattleTag")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("ClassicCharacterName")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("ClassicFaction")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("ClassicRealmName")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("ClassicRegion")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("PoeAccountName")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("PoeCharacterName")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("ShlBattleTag")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("ShlCharacterName")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("ShlFaction")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("ShlRealmName")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("ShlRegion")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("OrderCustomFields");
                });

            modelBuilder.Entity("Admin.Entities.DbOrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ProductCheckoutPrice")
                        .HasColumnType("numeric(19,1)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductOptions")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalOptionsCheckoutPrice")
                        .HasColumnType("numeric(19,1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("Admin.Entities.DbProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("InStock")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("PreOrder")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductDescriptionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ProductEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ProductGameId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProductImageThumb")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ProductPriority")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProductSeoId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductSeoId");

                    b.Property<Guid?>("ProductSubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductDescriptionId");

                    b.HasIndex("ProductGameId");

                    b.HasIndex("ProductSeoId");

                    b.HasIndex("ProductSubCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Admin.Entities.DbProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CategorySeoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ProductGameId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategorySeoId");

                    b.HasIndex("ProductGameId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Admin.Entities.DbProductDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("SubDescription1")
                        .HasColumnType("text");

                    b.Property<string>("SubDescription2")
                        .HasColumnType("text");

                    b.Property<string>("SubDescription3")
                        .HasColumnType("text");

                    b.Property<string>("SubDescription4")
                        .HasColumnType("text");

                    b.Property<string>("SubDescription5")
                        .HasColumnType("text");

                    b.Property<string>("SubDescriptionTitle1")
                        .HasColumnType("text");

                    b.Property<string>("SubDescriptionTitle2")
                        .HasColumnType("text");

                    b.Property<string>("SubDescriptionTitle3")
                        .HasColumnType("text");

                    b.Property<string>("SubDescriptionTitle4")
                        .HasColumnType("text");

                    b.Property<string>("SubDescriptionTitle5")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ProductDescription");
                });

            modelBuilder.Entity("Admin.Entities.DbProductGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GameDescription")
                        .HasColumnType("text");

                    b.Property<Guid?>("GameSeoId")
                        .HasColumnType("uuid");

                    b.Property<string>("GameShortUrl")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameSeoId");

                    b.ToTable("ProductGame");
                });

            modelBuilder.Entity("Admin.Entities.DbProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<Guid?>("OptionParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OptionProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("OptionType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OptionParentId");

                    b.HasIndex("OptionProductId");

                    b.ToTable("ProductOptions");
                });

            modelBuilder.Entity("Admin.Entities.DbProductOptionParam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ParameterParentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ParameterPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ParameterSale")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ParameterTooltip")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ParentOptionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParameterParentId");

                    b.HasIndex("ParentOptionId");

                    b.ToTable("ProductOptionParams");
                });

            modelBuilder.Entity("Admin.Entities.DbProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("EuPrice")
                        .HasColumnType("numeric(18,1)");

                    b.Property<decimal?>("EuSale")
                        .HasColumnType("numeric(18,0)");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("UsPrice")
                        .HasColumnType("numeric(18,1)");

                    b.Property<decimal?>("UsSale")
                        .HasColumnType("numeric(18,0)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("Admin.Entities.DbProductSubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubCategorySeoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("SubCategorySeoId");

                    b.ToTable("ProductSubCategory");
                });

            modelBuilder.Entity("Admin.Entities.DbRank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("Sale")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("Admin.Entities.DbRealm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<Guid>("ProductGameId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductGameId");

                    b.ToTable("Realms");
                });

            modelBuilder.Entity("Admin.Entities.DbRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Admin.Entities.DbSeo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomImageAlt")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CustomImageTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CustomTitle1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CustomTitle2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaRobots")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MetaTagDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaTagKeyWords")
                        .HasColumnType("text");

                    b.Property<string>("MetaTagTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Seoimage")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("SEOImage");

                    b.Property<string>("Seotags")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SEOTags");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UrlKeyWord")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Seo");
                });

            modelBuilder.Entity("Admin.Entities.DbTempOptionParam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("Delete")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("ParameterPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ParameterSale")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ParameterTooltip")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ParentOptionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Delete");

                    b.HasIndex("ParentOptionId");

                    b.ToTable("TempOptionParams");
                });

            modelBuilder.Entity("Admin.Entities.DbTemplateOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<Guid?>("OptionParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("OptionType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("TemplateOptions");
                });

            modelBuilder.Entity("Admin.Entities.DbUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultPage")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("Email")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("Password")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Admin.Entities.DbArticle", b =>
                {
                    b.HasOne("Admin.Entities.DbSeo", "Seo")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleSeoId");

                    b.HasOne("Admin.Entities.DbProductGame", "ProductGame")
                        .WithMany("Articles")
                        .HasForeignKey("ProductGameId");

                    b.Navigation("ProductGame");

                    b.Navigation("Seo");
                });

            modelBuilder.Entity("Admin.Entities.DbCustomer", b =>
                {
                    b.HasOne("Admin.Entities.DbRank", "Rank")
                        .WithMany("Customers")
                        .HasForeignKey("RankId");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Admin.Entities.DbHtmlBlocksChild", b =>
                {
                    b.HasOne("Admin.Entities.DbHtmlBlock", "SiteBlock")
                        .WithMany("HtmlBlocksChildren")
                        .HasForeignKey("SiteBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteBlock");
                });

            modelBuilder.Entity("Admin.Entities.DbOrder", b =>
                {
                    b.HasOne("Admin.Entities.DbCustomer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Admin.Entities.DbOrderCustomField", "OrderCustomFields")
                        .WithMany("Orders")
                        .HasForeignKey("OrderCustomFieldsId");

                    b.Navigation("Customer");

                    b.Navigation("OrderCustomFields");
                });

            modelBuilder.Entity("Admin.Entities.DbOrderProduct", b =>
                {
                    b.HasOne("Admin.Entities.DbOrder", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId");

                    b.HasOne("Admin.Entities.DbProduct", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Admin.Entities.DbProduct", b =>
                {
                    b.HasOne("Admin.Entities.DbProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Admin.Entities.DbProductDescription", "ProductDescription")
                        .WithMany("Products")
                        .HasForeignKey("ProductDescriptionId");

                    b.HasOne("Admin.Entities.DbProductGame", "ProductGame")
                        .WithMany("Products")
                        .HasForeignKey("ProductGameId");

                    b.HasOne("Admin.Entities.DbSeo", "ProductSeo")
                        .WithMany("Products")
                        .HasForeignKey("ProductSeoId");

                    b.HasOne("Admin.Entities.DbProductSubCategory", "ProductSubCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubCategoryId");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductDescription");

                    b.Navigation("ProductGame");

                    b.Navigation("ProductSeo");

                    b.Navigation("ProductSubCategory");
                });

            modelBuilder.Entity("Admin.Entities.DbProductCategory", b =>
                {
                    b.HasOne("Admin.Entities.DbSeo", "CategorySeo")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategorySeoId");

                    b.HasOne("Admin.Entities.DbProductGame", "ProductGame")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductGameId");

                    b.Navigation("CategorySeo");

                    b.Navigation("ProductGame");
                });

            modelBuilder.Entity("Admin.Entities.DbProductGame", b =>
                {
                    b.HasOne("Admin.Entities.DbSeo", "GameSeo")
                        .WithMany("ProductGames")
                        .HasForeignKey("GameSeoId");

                    b.Navigation("GameSeo");
                });

            modelBuilder.Entity("Admin.Entities.DbProductOption", b =>
                {
                    b.HasOne("Admin.Entities.DbProductOption", "OptionParent")
                        .WithMany("InverseOptionParent")
                        .HasForeignKey("OptionParentId");

                    b.HasOne("Admin.Entities.DbProduct", "OptionProduct")
                        .WithMany("ProductOptions")
                        .HasForeignKey("OptionProductId");

                    b.Navigation("OptionParent");

                    b.Navigation("OptionProduct");
                });

            modelBuilder.Entity("Admin.Entities.DbProductOptionParam", b =>
                {
                    b.HasOne("Admin.Entities.DbProductOptionParam", "ParameterParent")
                        .WithMany("InverseParameterParent")
                        .HasForeignKey("ParameterParentId");

                    b.HasOne("Admin.Entities.DbProductOption", "ParentOption")
                        .WithMany("ProductOptionParams")
                        .HasForeignKey("ParentOptionId");

                    b.Navigation("ParameterParent");

                    b.Navigation("ParentOption");
                });

            modelBuilder.Entity("Admin.Entities.DbProductPrice", b =>
                {
                    b.HasOne("Admin.Entities.DbProduct", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Admin.Entities.DbProductSubCategory", b =>
                {
                    b.HasOne("Admin.Entities.DbProductCategory", "ProductCategory")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("Admin.Entities.DbSeo", "SubCategorySeo")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("SubCategorySeoId");

                    b.Navigation("ProductCategory");

                    b.Navigation("SubCategorySeo");
                });

            modelBuilder.Entity("Admin.Entities.DbRealm", b =>
                {
                    b.HasOne("Admin.Entities.DbProductGame", "ProductGame")
                        .WithMany("Realms")
                        .HasForeignKey("ProductGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGame");
                });

            modelBuilder.Entity("Admin.Entities.DbTempOptionParam", b =>
                {
                    b.HasOne("Admin.Entities.DbTempOptionParam", "DeleteNavigation")
                        .WithMany("InverseDeleteNavigation")
                        .HasForeignKey("Delete");

                    b.HasOne("Admin.Entities.DbTemplateOption", "ParentOption")
                        .WithMany("TempOptionParams")
                        .HasForeignKey("ParentOptionId");

                    b.Navigation("DeleteNavigation");

                    b.Navigation("ParentOption");
                });

            modelBuilder.Entity("Admin.Entities.DbUser", b =>
                {
                    b.HasOne("Admin.Entities.DbRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Admin.Entities.DbCustomer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Admin.Entities.DbHtmlBlock", b =>
                {
                    b.Navigation("HtmlBlocksChildren");
                });

            modelBuilder.Entity("Admin.Entities.DbOrder", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Admin.Entities.DbOrderCustomField", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Admin.Entities.DbProduct", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ProductOptions");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("Admin.Entities.DbProductCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Admin.Entities.DbProductDescription", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Admin.Entities.DbProductGame", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("ProductCategories");

                    b.Navigation("Products");

                    b.Navigation("Realms");
                });

            modelBuilder.Entity("Admin.Entities.DbProductOption", b =>
                {
                    b.Navigation("InverseOptionParent");

                    b.Navigation("ProductOptionParams");
                });

            modelBuilder.Entity("Admin.Entities.DbProductOptionParam", b =>
                {
                    b.Navigation("InverseParameterParent");
                });

            modelBuilder.Entity("Admin.Entities.DbProductSubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Admin.Entities.DbRank", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Admin.Entities.DbRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Admin.Entities.DbSeo", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductGames");

                    b.Navigation("Products");

                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Admin.Entities.DbTempOptionParam", b =>
                {
                    b.Navigation("InverseDeleteNavigation");
                });

            modelBuilder.Entity("Admin.Entities.DbTemplateOption", b =>
                {
                    b.Navigation("TempOptionParams");
                });
#pragma warning restore 612, 618
        }
    }
}
